#!/usr/bin/env bash
# ================================================================
# -*- mode: bash -*-
# vi: set ft=sh
# ****************************************************************
#
# DESCRIPTION
#    Script assists to install & configure ansible projects
#
# OPTIONS & EXAMPLES
#   See SYNTAX (below)
#
# ----------------------------------------------------------------
# IMPLEMENTATION
#    version         script 0.1.4
#    author          Greg Milligan
#    copyright       Copyright (c) 2017 http://www.xybersolve.com
#    license         GNU General Public License
#
# ================================================================
#  DEBUG OPTION
#    set -n  # Uncomment to check your syntax, without execution.
#    set -x  # Uncomment to debug this shell script
#
# ---------------------------------------------------------------
#
# TODO: Need to do this
# ****************************************************************


# ---------------------------------------
# CONFIGFURATION
# ---------------------------------------
# strict environment
set -o errexit  # exit on command error status
set -o nounset  # no unreadonlyd variables
set -o pipefail # failr on pipe failures
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: ${?}" >&2' ERR

# ---------------------------------------
# GLOBAL VARIABLES
# ---------------------------------------
# booleans
declare -ir TRUE=1
declare -ir FALSE=0
# script info

declare -r PROGNAME="$(basename ${0})"
declare -r VERSION=0.0.1
declare -r SUBJECT=""
declare -r KEYS=""
declare -ri MIN_ARG_COUNT=1
declare -r SYNTAX=$(cat <<EOF

    Script: ${PROGNAME}
    Purpose: Manage ansible projects, setup and configuration
    Usage: ${PROGNAME} [-h|--help] [-v|--version]

    Options:
      --help:  help and usage
      --version: show version info
      --install: Install ansible on Ubuntu
      --setup: Setup & configure local ansible project
      --keys: Setup keys for client automation access
      --dist: Copy scripts to scripts bin directory
      --sync: Synchronize local ansible code to bastion server (rsync)
      --watch: Synchronize automatically anytime code is updated

      --role=<role_name>: create a role
        -h|--handlers: create 'handlers'
        -t|--temp*: create 'templates'
        -f|--files: create 'files'
        -d|--defaults: create 'defaults'
        -p: use current directory

    Examples:    
      ${PROGNAME} --install
      ${PROGNAME} --check-stack
      ${PROGNAME} --setup
      ${PROGNAME} --keys
      ${PROGNAME} --info
      ${PROGNAME} --install --setup --keys --info
      ${PROGNAME} --sync
      ${PROGNAME} --role=mysql -p -d -h -f -t
      ${PROGNAME} --role=mysql -p --defaults --handlers -files --temp
      ${PROGNAME} --watch
      ${PROGNAME} --dist --host=54.241.221.184 --user=ubuntu --dir=bin
      ${PROGNAME} --dist --hostname=control --dir=bin


EOF
)
# files & directories
declare -r SCRIPT_DIR="$( dirname ${0} )"
declare -r CONFIG_FILE="${SCRIPT_DIR}/antsy.config.sh"

# actions
declare -i INSTALL_ANSIBLE=${FALSE}
declare -i SETUP_ANSIBLE=${FALSE}
declare -i SETUP_KEYS=${FALSE}
declare -i CHECK_INFO=${FALSE}
declare -i DISTRIBUTE=${FALSE}
declare -i SYNC=${FALSE}
declare -i WATCH=${FALSE}
declare -i CHECK_STACK=${FALSE}

# generators
declare -i GEN_ROLE=${FALSE}

# flags
declare -i USE_CURRENT_DIR=${FALSE}
declare -i CREATE_DEFAULTS=${FALSE}
declare -i CREATE_HANDLERS=${FALSE}
declare -i CREATE_FILES=${FALSE}
declare -i CREATE_TEMPLATES=${FALSE}

# variables
declare -r EMAIL='xybersolve@gmail.com'
declare NAME=''
declare SCP_HOST=''
declare SCP_HOSTNAME=''
declare SCP_USER=''
declare SCP_DIR=''

# ---------------------------------------
# COMMON FUNCTIONS
# ---------------------------------------
usage() {
  echo "${SYNTAX}"
}

error() {
  printf "\n%s\n" "Error: ${1}"
}

die() {
  error "${1}"
  usage
  printf "\n\n"
  exit "${2:-1}"
}

show_version() {
  printf "\n\n%s  %s\n\n\n" "${PROGNAME}" "${VERSION}"
  exit 0
}

show_help() {
  printf "\n\n"
  usage
  printf "\n\n"
  exit 0
}

# ---------------------------------------
# MAIN CODE GOES HERE
# ---------------------------------------
source "${CONFIG_FILE}" \
  || die "Unable to load config file: ${CONFIG_FILE}" 2

__python() {
  sudo apt-get update
  sudo apt-get install python-minimal -y
  python --version
}

__packages() {
  # packages you need
  sudo apt-get install software-properties-common python python-pip -y
  sudo apt-get install sshpass -y

  # packages that you will want to have
  sudo apt-get install apt-transport-https ca-certificates -y
  sudo apt-get install python-dev libffi-dev libssl-dev -y
}

__pip() {
  sudo -H pip install pip --upgrade
  sudo -H pip install setuptools --upgrade
  sudo -H pip install pyopenssl ndg-httpsclient pyasn1
  sudo -H pip install ansible
}

__validate_install() {
  echo
  echo "Which Ansible:"
  echo $(which ansible)
  echo
  echo "Ansible Version"
  /usr/local/bin/ansible --version

}
__install_ansible() {
  __python
  __packages
  __pip
  __validate_install
}

__setup_config() {
  [[ -d /etc/ansible ]] || sudo mkdir -p /etc/ansible

  # local host
  [[ -f /etc/ansible/hosts ]] \
    || echo -e "[local]\n127.0.0.1" | sudo tee -a /etc/ansible/hosts

  # global config
  if [[ ! -f /etc/ansible/ansible.cfg ]]; then
    sudo wget -O /etc/ansible/ansible.cfg \
      https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg
  fi
}

__setup_project() {
  # setup project directoies
  mkdir -p ${PROJECT_DIR}/{files,playbooks,templates,group_vars}

  # local inventory
  sudo echo -e "[local]\n127.0.0.1" >> ${PROJECT_DIR}/hosts

  # use global config and later customize
  # only copy it the first time, don't overwrite chages
  sudo cp /etc/ansible/ansible.cfg ${PROJECT_DIR}/ansible.cfg

  # ansible config for local dev
  sudo echo 'ANSIBLE_CONFIG=~/ansible/ansible.cfg' >> ~/.profile

  source ~/.profile

  # TODO: sed this into cfg file
  # inventory = ~/ansible/hosts
  # log_path = ~/ansible/ansible.log
  # private_key_file = ~/.ssh/id_rsa

  echo "Ansible Configuration Test"
  ansible --version
}

__validate_setup() {
  # ensure ssh server running on box
  sudo service ssh status
  netstat -an | grep 22 | grep "LISTEN "

  # avoids ssh prompt or disable of host_key_checking in config
  #sudo 'ssh-keyscan -H 127.0.0.1' >> ~/.ssh/known_hosts

  # ping hosts in inventory
  # connect as 'ubuntu' user, -k: ask for password
  ansible all -m ping -u ubuntu -k
}

__setup_ansible() {
    [[ -d ${PROJECT_DIR}/playbooks ]] \
      && { echo "Project is already set up." ; return 0; }

  __setup_config
  __setup_project
  __validate_setup
}

__setup_keys() {
  # generate: ansible_control_rsa keys
  local -r keyType="rsa"
  local -r keyName="ansible_control_${keyType}"
  if [[ -f ~/.ssh/${keyName} ]]; then
    echo "Keys: ${keyName} appear to alreadt be set up."
    return 0
  fi

  cd ~/.ssh
  echo "Press Enter, no password desired"
  sudo ssh-keygen -t "${keyType}" -C "${EMAIL}" -f "${keyName}"
  # copy public key to ansible files
  sudo cp ./${keyName}.pub ${PROJECT_DIR}/files/${keyName}.pub

  # for use in
  # ansible-playbook playbooks/bootstrap-ubuntu.yaml -u ubuntu -k
}

__ssh_setup() {
  sudo ssh-agent bash
  sudo ssh-add ~/.ssh/transible-key
}

__check_app() {
  local -r app="${1}"
  printf "\nChecking: %s\n" "${app}"
  which "${app}"
  "${app}" --version
}

__check_stack() {
  printf "\nChecking ssh-agent\n"
  ssh-add -l

  __check_app python
  __check_app terraform
  __check_app ansible
  __check_app aws

  printf "\n\n"
}

__check_info() {
  # get free memory of localhost
  ansible 127.0.0.1 -m shell -a "free -m" -u ubuntu -k

  # use setup module to show facts about localhost
  ansible 127.0.0.1 -m setup -u ubuntu -k

  # use shell module to show bound ports on localhost
  ansible 127.0.0.1 -m shell -a "netstat -an | grep 'LISTEN '" -u ubuntu -k
}
#
# Generation support routines
#
__check_dir() {
  local -r dir="$(dirname ${1})"
  [[ -d "${dir}" ]] || mkdir -p "${dir}"
}

__gen_yaml_file() {
  local -r filepath="${1}"
  __check_dir "${filepath}"
  [[ -e "${filepath}" ]] || echo -e '---\n' > "${filepath}"

}

__gen_directory() {
  local -r dir="${1}"
  [[ -d "${dir}" ]] || mkdir -p "${dir}"
}

__gen_file() {
  local -r filepath="${1}"
  __check_dir "${filepath}"
  [[ -e "${filepath}" ]] || touch "${filepath}"
}

__gen_include() {
  # include the code named file into 'main.yaml' - for role
  local -r dir="${1}"
  local -r name="${2}"

  # exit function if directory already exists, but continue process
  [[ -d "${dir}" ]] \
    && return 0 \
    || mkdir -p "${dir}";

  # the include file
  echo -e "---\n- include: ${name}.yaml\n" > "${dir}/main.yml"
  # the main code file
  echo -e "---\n" > "${dir}/${name}.yml"
}

__set_perms() {
  local dir="${1}"
  find "${dir}" -type d -exec chmod 755 {} \;
  find "${dir}" -type f -exec chmod 644 {} \;
}
__test_dir() {
  local -r dir="${1}"
  [[ -d ${dir} ]] && die "Directory already exists: ${dir}"
}
#
# Generators
#
__gen_role() {
  # ? use current working directory
  (( USE_CURRENT_DIR )) \
    && local -r base_dir="$(pwd)/roles/${NAME}" \
    || local -r base_dir="${PROJECT_DIR}/roles/${NAME}"
  #local -r base_dir="${PROJECT_DIR}/roles/${NAME}"
  printf "Creating Role: %s\n" "${base_dir}"

  ##__test_dir ${base_dir}

  [[ -d "${base_dir}" ]] || mkdir -p "${base_dir}"
  #__gen_yaml_file "${base_dir}/tasks/main.yml"
  # always create tasks
  __gen_yaml_file "${base_dir}/tasks/main.yaml"
  #__gen_yaml_file "${base_dir}/${NAME}.yml"
  #__gen_file "${base_dir}/handlers/main.yml"
  (( CREATE_HANDLERS )) \
    &&  __gen_yaml_file "${base_dir}/handlers/main.yaml"
    #&&  __gen_include "${base_dir}/handlers" "${NAME}-handlers"

  (( CREATE_DEFAULTS )) \
    &&  __gen_yaml_file "${base_dir}/defaults/main.yaml"
    #&& __gen_include "${base_dir}/defaults" "${NAME}-defaults"

  (( CREATE_FILES )) \
    && __gen_directory "${base_dir}/files"

  (( CREATE_TEMPLATES )) \
      && __gen_directory "${base_dir}/templates"

  __set_perms "${base_dir}"
}

__distribute() {
  [[ ~/bin/xs-antsy =~ $(pwd) ]] || die "Not in project directory" 4

  # copy script & config to ~/bin
  local to=~/bin
  local -a files=(
    antsy
    antsy.config.sh
    #ec2.ini
    #cp ec2.py
  )

  printf "\n"
  for file in "${files[@]}"; do
    cp ${file} ${to} \
      && printf "👍🏻  Copied: %s to %s\n" "${file}" "${to}"
  done
  printf "\n"

  # Copy to Remote Server
  [[ -n ${SCP_HOST} && -n ${SCP_USER} ]] \
    && SCP_HOSTNAME="${SCP_USER}@${SCP_HOST}"

  # distribute this script to ansible server
  if [[ -n ${SCP_HOSTNAME} && -n ${SCP_DIR} ]]; then
    for file in "${files[@]}"; do
      scp "${file}" ${SCP_HOSTNAME}:${SCP_DIR}
    done
  fi

  # if [[ -n ${SCP_HOST} && -n ${SCP_USER} && -n ${SCP_DIR} ]]; then
  #   for file in "${files[@]}"; do
  #     scp "${file}" ${SCP_USER}@${SCP_HOST}:${SCP_DIR}
  #   done
  # fi
  #scp ec2.ini ${REMOTE_HOST}:${REMOTE_DIR}
  #scp ec2.py ${REMOTE_HOST}:${REMOTE_DIR}
}

__synchronize() {
  rsync -av ${PROJECT_DIR}/* ${REMOTE_HOST}:${REMOTE_DIR}/
}
__watch() {
  cd "${PROJECT_DIR}"
  watch -n 3 "${0}" --sync
}


__get_opts() {

  while (( $# > 0 )); do
    local arg="${1}"; shift;
    case ${arg} in
      --help)    show_help                ;;
      --version) show_version             ;;
      --install)  INSTALL_ANSIBLE=${TRUE} ;;
      --setup)    SETUP_ANSIBLE=${TRUE}   ;;
      --keys)     SETUP_KEYS=${TRUE}      ;;
      --info)     CHECK_INFO=${TRUE}      ;;
      --sync)     SYNC=${TRUE}            ;;
      --watch)    WATCH=${TRUE}           ;;
      --check-stack) CHECK_STACK=${TRUE}  ;;

      # Role Generation
      --role*) # role and its name; --role=myRole
        GEN_ROLE=${TRUE}
        [[ ${arg:-''} =~ '=' ]] && NAME="${arg#*=}" ;;
      -p|--pwd)   USE_CURRENT_DIR=${TRUE} ;;
      -d|--def*)  CREATE_DEFAULTS=${TRUE} ;;
      -h|--han*)  CREATE_HANDLERS=${TRUE} ;;
      -f|--files) CREATE_FILES=${TRUE}    ;;
      -t|--temp*) CREATE_TEMPLATES=${TRUE} ;;
      -a|--all)
          CREATE_DEFAULTS=${TRUE}
          CREATE_HANDLERS=${TRUE}
      ;;

      # Distribute
      --dist)     DISTRIBUTE=${TRUE}      ;;
      --hostname*)
        [[ ${arg:-''} =~ '=' ]] && SCP_HOSTNAME="${arg#*=}" ;;
      --host*) # used by --dist
        [[ ${arg:-''} =~ '=' ]] && SCP_HOST="${arg#*=}" ;;
      --user*) # used by --dist
        [[ ${arg:-''} =~ '=' ]] && SCP_USER="${arg#*=}" ;;
      --dir*) # used by --dist
        [[ ${arg:-''} =~ '=' ]] && SCP_DIR="${arg#*=}" ;;

      # Otherwise
      *) die "Unknown option: ${arg}" ;;
   esac
  done
  return 0
}

__dispatch() {
  # order can matter here
  (( CHECK_STACK )) && __check_stack
  (( INSTALL_ANSIBLE )) && __install_ansible
  (( SETUP_ANSIBLE )) && __setup_ansible
  (( SETUP_KEYS )) && __setup_keys
  (( CHECK_INFO )) && __check_info
  (( GEN_ROLE )) && __gen_role
  (( DISTRIBUTE )) && __distribute
  (( SYNC )) && __synchronize
  (( WATCH )) && __watch

  return 0
}

main() {
  (( ${#} < MIN_ARG_COUNT )) && error "err message here" 1
  (( $# > 0 )) && __get_opts "$@"

  __dispatch

  return 0
}
(( ${#} > 0 )) && main "${@}" || main

:<<PYTHON_INSTALL
# Notes on getting python properly configured on MacOS
# Critical for boto and AWS automation

$ brew install python@2

# in .bashrc - SUPER IMPORTANT
export PATH="/usr/local/opt/python@2/libexec/bin:$PATH"

# check
$ which(python)
$ which (python2)
$ python -V
$ python2 -V
$ pip -V
$ pip2 -V

VirtualEnv
# intall
$ pip install virtualenv
$ virtualenv --version

# setup project
$ cd my_project_folder
$ virtualenv my_project

# activate & deactivate
$ source my_project/bin/activate
$ deactivate

Ansible
# ansible install
$ pip install ansible --quiet

# ansible upgrade
$ pip install ansible --upgrade

PYTHON_INSTALL
